import xarray as xr
import os
import glob

"""
I made a bad judgement to output hourly data from the routing simulations
This script subset 6-hrly data from the hourly data & saves it & deletes the original hourly data generated by the simulations
"""

__title__ = "convert_hourly_data_to_6hourly"
__author__ = "Anjana Devanand"
__version__ = "2.0"
__email__ = "anjanadevanand@gmail.com"

if __name__ == '__main__': 
    # the run directory of the simulation
    WRF_HYDRO_DIR = os.environ['WRF_HYDRO_DIR']
    year = os.environ['year']    
    # mon & day may need to be padded with zero
    mon_in = os.environ['mon']
    
    print(year)
    mon = str.zfill(mon_in,2)
    print(mon)
    
    in_dir = WRF_HYDRO_DIR + 'OUTPUT/DAILY_FILES/'
    out_dir = in_dir + 'RTOUT_6hr/'
    
    # subset files at these hours of the day for RT and GW files
    target_hours = [0, 6, 12, 18]  # 0AM, 6AM, 12PM, and 6PM
    suffix_list = ['.RTOUT_DOMAIN1', '.GWOUT_DOMAIN1']
    
    # changing to the in_dir so that I can use the same fnames to write the output files in the out_dir; not possible if glob returns the full path
    os.chdir(in_dir)
    # if not os.path.exists(out_dir):
    #     os.makedirs(out_dir)
    
    for suffix in suffix_list:
        fnames = glob.glob(year + mon + '*' + suffix)
        
        # some runs do not have GW outputs; using this if condition to exit in those cases
        if (len(fnames)>0):
            for f in fnames:
                # open file & subset data
                ds = xr.open_dataset(f)
                ds = ds.sel(time = ds['time.hour'].isin(target_hours))    
    
                # compression for nc files
                for var in ds.data_vars:
                    ds[var].encoding['zlib'] = True
                    ds[var].encoding['complevel'] = 1
                    del(ds[var].encoding['contiguous'])
                    del(ds[var].encoding['chunksizes'])
            
                # write subsetted data to the out_dir
                print(out_dir + f)
                ds.to_netcdf(out_dir + f)
                
                # delete the original file
                os.remove(f)